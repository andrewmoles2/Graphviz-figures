<td port='3'>7</td>
</tr>
</table>>];
splita2 [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='2'>A</td>
<td>Y</td>
<td port='2'>4</td>
</tr>
</table>>];
splitb [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='2'>B</td>
<td>X</td>
<td port='2'>5</td>
</tr>
</table>>];
splitb2 [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='1'>B</td>
<td>Y</td>
<td port='1'>2</td>
</tr>
<tr>
<td port='3'>B</td>
<td>Y</td>
<td port='3'>8</td>
</tr>
</table>>];
splitc [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='1'>C</td>
<td>X</td>
<td port='1'>3</td>
</tr>
<tr>
<td port='3'>C</td>
<td>X</td>
<td port='3'>9</td>
</tr>
</table>>];
splitc2 [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='2'>C</td>
<td>Y</td>
<td port='2'>6</td>
</tr>
</table>>];
}
# apply function
subgraph cluster3{
label = 'Apply function\n (sum)'
suma [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='1'>A</td>
<td port='1'>X</td>
<td port='1'>8</td>
</tr>
</table>>];
suma2 [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='1'>A</td>
<td port='1'>Y</td>
<td port='1'>4</td>
</tr>
</table>>];
sumb [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='1'>B</td>
<td port='1'>X</td>
<td port='1'>5</td>
</tr>
</table>>];
sumb2 [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='1'>B</td>
<td port='1'>Y</td>
<td port='1'>10</td>
</tr>
</table>>];
sumc [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='1'>C</td>
<td port='1'>X</td>
<td port='1'>12</td>
</tr>
</table>>];
sumc2 [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='1'>C</td>
<td port='1'>Y</td>
<td port='1'>6</td>
</tr>
</table>>];
}
# combine
subgraph cluster4{
label = 'Combine'
combine [label=<
<table border='0' cellborder='1' cellspacing='0'>
<tr>
<td><i>Key</i></td>
<td><i>Key2</i></td>
<td><i>Data</i></td>
</tr>
<tr>
<td port='1'>A</td>
<td port='1'>X</td>
<td port='1'>8</td>
</tr>
<tr>
<td port='2'>A</td>
<td port='2'>Y</td>
<td port='2'>4</td>
</tr>
<tr>
<td port='3'>B</td>
<td port='3'>X</td>
<td port='3'>5</td>
</tr>
<tr>
<td port='4'>B</td>
<td port='4'>Y</td>
<td port='4'>10</td>
</tr>
<tr>
<td port='5'>C</td>
<td port='5'>X</td>
<td port='5'>12</td>
</tr>
<tr>
<td port='6'>C</td>
<td port='6'>Y</td>
<td port='6'>6</td>
</tr>
</table>>];
}
# edges
edge [color = DarkGreen]
input:1 -> splita:1
input:4 -> splita2:2
input:7 -> splita:3
splita -> suma -> combine:1
splita2 -> suma2 -> combine:2
edge [color = Maroon]
input:2 -> splitb2:1
input:5 -> splitb:2
input:8 -> splitb2:3
splitb -> sumb -> combine:3
splitb2 -> sumb2 -> combine:4
edge [color = Navy]
input:3 -> splitc:1
input:6 -> splitc2:2
input:9 -> splitc:3
splitc -> sumc -> combine:5
splitc2 -> sumc2 -> combine:6
} ")
agg2
# save two group aggregation ----
export_svg(agg2) %>%
charToRaw() %>%
rsvg::rsvg_png(here("figures", "Aggregation_twogroup.png"))
export_svg(agg2) %>%
charToRaw() %>%
rsvg::rsvg_pdf(here("figures", "Aggregation_twogroup.pdf"))
# dplyr aggregation with same data
library(dplyr)
test <- data.frame(
key = c("A", "B", "C", "A", "B", "C"),
data = c(1,2,3,4,5,6)
)
test %>%
group_by(key) %>%
summarise(sum = sum(data))
test2 <- data.frame(
key = c("A", "B", "C", "A", "B", "C","A", "B", "C"),
key2 = c("X", "Y","X", "Y","X", "Y","X", "Y","X"),
data = c(1,2,3,4,5,6,7,8,9)
)
test2
test2 %>%
group_by(key, key2) %>%
summarise(sum = sum(data))
# load libraries ----
library(DiagrammeR)
library(DiagrammeRsvg)
library(magrittr)
library(rsvg)
library(here)
# File systems ----
fileSys <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR, nodesep = 0.5, ranksep = 0.75, fontsize = 35, fillcolor = 'Gainsboro', color = 'Purple3', style = 'filled, rounded, bold']
label = 'An example file system for analysis';
# define the global styles of the nodes
node[shape = rectangle, style = 'filled, rounded, bold', fillcolor = mistyrose, fontsize = 25, width = 4.5, height = 1.5, fixedsize = true]
edge [color = Black, arrowhead = vee, fontsize = 16, penwidth = 4]
subgraph cluster1{
label = 'Overview'
# nodes
topLayer [label = 'Name of your project\nFor example:\nmy_PHD or Company_project', fillcolor = honeydew]
secondLayer [label = 'Name of your analysis\n', fillcolor = aliceblue]
thirdLayer [label = 'Analysis specific files']
fourthLayer [label = 'Subfolders', fillcolor = cornsilk]
# order
topLayer -> secondLayer -> thirdLayer -> fourthLayer
}
subgraph cluster0{
label = 'Example'
color = 'Orange'
# nodes
project [label = 'Company_project', fillcolor = honeydew]
node [fillcolor = aliceblue]
AnalysisA [label = 'Analysis_A']
AnalysisB [label = 'Analysis_B']
node [fillcolor = mistyrose]
rawDataA [label = 'RawData']
rawDataB [label = 'RawData']
processedDataA [label = 'ProcessedData']
processedDataB [label = 'ProcessedData']
codeA [label = 'Code']
codeB [label = 'Code']
outputsA [label = 'Outputs']
outputsB [label = 'Outputs']
node [fillcolor = cornsilk]
tablesA [label = 'Tables']
figuresA [label = 'Figures']
tablesB [label = 'Tables']
figuresB [label = 'Figures']
# order
project -> {AnalysisA AnalysisB}
AnalysisA -> {rawDataA processedDataA codeA outputsA}
AnalysisB -> {rawDataB processedDataB codeB outputsB}
outputsA -> {tablesA figuresA}
outputsB -> {tablesB figuresB}
}
}")
fileSys
# save ----
export_svg(fileSys) %>%
charToRaw() %>%
rsvg::rsvg_png(here("figures", "fileSys.png"))
# librarys ----
library(DiagrammeR)
library(DiagrammeRsvg)
library(magrittr)
library(rsvg)
library(here)
# text flow diagrammer ----
textA <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TD, nodesep = 0.5, ranksep = 0.5, fontsize = 35, fillcolor = 'Silver', color = 'Purple3', style = 'filled, rounded, bold', fontname = Avenir]
label = 'Where to start with text analysis';
# define the global styles of the nodes
node [shape = rectangle, style = 'filled, rounded, bold', fillcolor = Gainsboro, fontsize = 25, width = 5, height = 1.5, fixedsize = true, fontname = Avenir]
edge [color = Black, arrowhead = vee, fontsize = 25, fontname = Avenir, penwidth = 2]
# nodes
quantQual [label = 'Are you doing quantitative\n or qualitative text analysis?']
qual [label = 'Qualitative']
nvivo [label = 'Use NVivo or QDA Miner', fillcolor = Cornsilk]
quant [label = 'Quantitative']
coding [label = 'Do you know, or want to learn,\n how to code in R or Python?']
qda [label = 'Use QDA Miner and WordStat', fillcolor = Cornsilk]
python [label = 'Python']
nltk [label = 'Learn and use NLTK', fillcolor = Cornsilk]
R [label = 'R']
text [label = 'Learn and use\n Quanteda or Tidytext', fillcolor = Cornsilk]
tdm [label = 'Use ProQuest TDM Studio', fillcolor = Cornsilk]
# order
quantQual -> quant -> coding
quantQual -> qual -> nvivo
coding -> qda [label = 'No']
coding -> {python R} [label = 'Yes']
R -> text
python -> nltk
{R python} -> tdm
}")
textA
# save output pdf and png
export_svg(textA) %>%
charToRaw() %>%
rsvg::rsvg_png(here("figures", "text_analysis.png"))
export_svg(textA) %>%
charToRaw() %>%
rsvg::rsvg_pdf(here("figures", "text_analysis.pdf"))
DiagrammeR::grViz("example_flow.dot")
DiagrammeR::grViz("example_flow.dot")
DiagrammeR::grViz("example_flow.dot")
# librarys ----
library(DiagrammeR)
library(DiagrammeRsvg)
library(magrittr)
library(rsvg)
library(here)
# text flow diagrammer ----
textA <- DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TD, nodesep = 0.5, ranksep = 0.5, fontsize = 35, fillcolor = 'Silver', color = 'Purple3', style = 'filled, rounded, bold', fontname = Avenir]
label = 'Where to start with text analysis';
# define the global styles of the nodes
node [shape = rectangle, style = 'filled, rounded, bold', fillcolor = Gainsboro, fontsize = 25, width = 5, height = 1.5, fixedsize = true, fontname = Avenir]
edge [color = Black, arrowhead = vee, fontsize = 25, fontname = Avenir, penwidth = 2]
# nodes
quantQual [label = 'Are you doing quantitative\n or qualitative text analysis?']
qual [label = 'Qualitative']
nvivo [label = 'Use NVivo or QDA Miner', fillcolor = Cornsilk]
quant [label = 'Quantitative']
coding [label = 'Do you know, or want to learn,\n how to code in R or Python?']
qda [label = 'Use QDA Miner and WordStat', fillcolor = Cornsilk]
python [label = 'Python']
nltk [label = 'Learn and use NLTK', fillcolor = Cornsilk]
R [label = 'R']
text [label = 'Learn and use\n Quanteda or Tidytext', fillcolor = Cornsilk]
tdm [label = 'Use ProQuest TDM Studio', fillcolor = Cornsilk]
# order
quantQual -> quant -> coding
quantQual -> qual -> nvivo
coding -> qda [label = 'No']
coding -> {python R} [label = 'Yes']
R -> text
python -> nltk
{R python} -> tdm
}")
textA
# save output pdf and png
export_svg(textA) %>%
charToRaw() %>%
rsvg::rsvg_png(here("figures", "text_analysis.png"))
export_svg(textA) %>%
charToRaw() %>%
rsvg::rsvg_pdf(here("figures", "text_analysis.pdf"))
library(DiagrammeR)
library(DiagrammeRsvg)
library(magrittr)
library(rsvg)
x <- rnorm(30)
y <- 0
for (i in 1:10) {
y <- x[i] * x[i]
print(y[i])
}
x <- rnorm(30)
y <- 0
for (i in 1:10) {
y <- x[i] * x[i]
print(i)
}
x <- rnorm(30)
y <- 0
for (i in 1:10) {
y <- x[i] * x[i]
print(y)
}
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB, nodesep = 0.5, ranksep = 0.75, fontsize = 35, fillcolor = 'Gainsboro', color = 'Purple3', style = 'filled, rounded, bold']
label = 'Flow diagram of a for loop';
node [shape = rectangle, style = 'filled, rounded, bold', fillcolor = mistyrose, fontsize = 25, width = 4.5, height = 1.5, fixedsize = true]
edge [color = Black, arrowhead = vee, fontsize = 16, penwidth = 4]
start [label = 'start']
ex_val [label = 'extract value from vector']
start -> ex_val
}")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB, nodesep = 0.5, ranksep = 0.75, fontsize = 35, fillcolor = 'Gainsboro', color = 'Purple3', style = 'filled, rounded, bold']
label = 'Flow diagram of a for loop';
node [shape = rectangle, style = 'filled, rounded, bold', fillcolor = mistyrose, fontsize = 25, width = 4.5, height = 1.5, fixedsize = true]
edge [color = Black, arrowhead = vee, fontsize = 16, penwidth = 4]
start [label = 'start']
is_end [label = 'last item?']
ex_val [label = 'extract value from vector']
start -> ex_val
start -> is_end
}")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB, nodesep = 0.5, ranksep = 0.75, fontsize = 35, fillcolor = 'Gainsboro', color = 'Purple3', style = 'filled, rounded, bold']
label = 'Flow diagram of a for loop';
node [shape = rectangle, style = 'filled, rounded, bold', fillcolor = mistyrose, fontsize = 25, width = 4.5, height = 1.5, fixedsize = true]
edge [color = Black, arrowhead = vee, fontsize = 16, penwidth = 4]
start [label = 'start']
is_end [label = 'last item?']
ex_val [label = 'extract value from vector']
start -> is_end -> ex_val
}")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB, nodesep = 0.5, ranksep = 0.75, fontsize = 35, fillcolor = 'Gainsboro', color = 'Purple3', style = 'filled, rounded, bold']
label = 'Flow diagram of a for loop';
node [shape = rectangle, style = 'filled, rounded, bold', fillcolor = mistyrose, fontsize = 25, width = 4.5, height = 1.5, fixedsize = true]
edge [color = Black, arrowhead = vee, fontsize = 16, penwidth = 4]
start [label = 'start']
is_end [label = 'last item?']
ex_val [label = 'extract value from vector']
do_stuff [label = 'now do something']
start -> is_end -> ex_val
ex_val -> do_stuff
}")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB, nodesep = 0.5, ranksep = 0.75, fontsize = 35, fillcolor = 'Gainsboro', color = 'Purple3', style = 'filled, rounded, bold']
label = 'Flow diagram of a for loop';
node [shape = rectangle, style = 'filled, rounded, bold', fillcolor = mistyrose, fontsize = 25, width = 4.5, height = 1.5, fixedsize = true]
edge [color = Black, arrowhead = vee, fontsize = 16, penwidth = 4]
start [label = 'start']
is_end [label = 'last item?']
ex_val [label = 'extract value from vector']
do_stuff [label = 'now do something']
start -> is_end -> ex_val
ex_val -> do_stuff -> is_end
}")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB, nodesep = 0.5, ranksep = 0.75, fontsize = 35, fillcolor = 'Gainsboro', color = 'Purple3', style = 'filled, rounded, bold']
label = 'Flow diagram of a for loop';
node [shape = rectangle, style = 'filled, rounded, bold', fillcolor = mistyrose, fontsize = 25, width = 4.5, height = 1.5, fixedsize = true]
edge [color = Black, arrowhead = vee, fontsize = 16, penwidth = 4]
start [label = 'start']
is_end [label = 'last item?']
ex_val [label = 'extract value from vector']
do_stuff [label = 'now do something']
end [label = 'end']
start -> is_end -> ex_val
ex_val -> do_stuff -> is_end
is_end -> end
}")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB, nodesep = 0.5, ranksep = 0.75, fontsize = 35, fillcolor = 'Gainsboro', color = 'Purple3', style = 'filled, rounded, bold']
label = 'Flow diagram of a for loop';
node [shape = rectangle, style = 'filled, rounded, bold', fillcolor = mistyrose, fontsize = 25, width = 4.5, height = 1.5, fixedsize = true]
edge [color = Black, arrowhead = vee, fontsize = 16, penwidth = 4]
start [label = 'start']
is_end [label = 'last item?']
ex_val [label = 'extract value from vector']
do_stuff [label = 'now do something']
end [label = 'end']
start -> is_end -> ex_val
ex_val -> do_stuff -> is_end
is_end -> end [lable = 'yes']
}")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB, nodesep = 0.5, ranksep = 0.75, fontsize = 35, fillcolor = 'Gainsboro', color = 'Purple3', style = 'filled, rounded, bold']
label = 'Flow diagram of a for loop';
node [shape = rectangle, style = 'filled, rounded, bold', fillcolor = mistyrose, fontsize = 25, width = 4.5, height = 1.5, fixedsize = true]
edge [color = Black, arrowhead = vee, fontsize = 16, penwidth = 4]
start [label = 'start']
is_end [label = 'last item?']
ex_val [label = 'extract value from vector']
do_stuff [label = 'now do something']
end [label = 'end']
start -> is_end -> ex_val
ex_val -> do_stuff -> is_end
is_end -> end [label = 'yes']
}")
